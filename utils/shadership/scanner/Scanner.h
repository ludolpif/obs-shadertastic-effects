// Generated by Flexc++ V2.11.02 on Mon, 09 Sep 2024 06:55:49 +0200

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"
#include <fstream>
#include <set>

// $insert classHead
class Scanner: public ScannerBase
{
    public:
        enum Tokens
        {
            COMMENT = 257,
            STRING,
            IDENTIFIER,
            PP_INCLUDE,
            PP_DEFINE,
            PP_UNDEF,
            PP_IFDEF,
            PP_IFNDEF,
            PP_ENDIF,
            PP_OTHER,
            WS,
            NL,
            CHAR
        };
        std::set<std::string> pp_defined_symbols;

        explicit Scanner(std::istream &in = std::cin, std::ostream &out = std::cout, bool keepCwd = true);

        Scanner(std::string const &infile, std::string const &outfile, bool keepCwd = true);
        
        void include(std::string const &infile) {
            std::ifstream ifs(infile);
            if (!ifs.good()) {
                std::cerr << "Can't open or read included file: \"" << infile << "\"" << std::endl; 
                std::cerr << "Current directory is: " << this->cwd() << std::endl;
                //FIXME proper error handling
            } else {
                //XXX closing ?
                this->pushStream(infile);
            }
        }
        std::string decode_string() {
            // XXX there is more to do than stripping the double-quotes
            return this->matched().substr(1, this->length() - 2);
        }
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex_();
        int executeAction_(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum_ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out, bool keepCwd)
:
    ScannerBase(in, out, keepCwd)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile, bool keepCwd)
:
    ScannerBase(infile, outfile, keepCwd)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex_();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum_ type) 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print_();
}


#endif // Scanner_H_INCLUDED_

